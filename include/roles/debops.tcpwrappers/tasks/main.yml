---

# ---- Manage /etc/hosts.allow ----

- name: Make sure /etc/hosts.allow.d directory exists
  file:
    path: '/etc/hosts.allow.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Create /etc/hosts.allow.d/00_ansible
  template:
    src: 'etc/hosts.allow.d/00_ansible.j2'
    dest: '/etc/hosts.allow.d/00_ansible'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Divert original /etc/hosts.allow
  command: dpkg-divert --quiet --local --divert {{ tcpwrappers_divert_hosts_allow }} --rename /etc/hosts.allow
           creates={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is defined and tcpwrappers

- name: Allow access from Ansible Controller to sshd
  template:
    src: 'etc/hosts.allow.d/ansible_controller.j2'
    dest: '/etc/hosts.allow.d/10_ansible_controller'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Remove hosts.allow entries if requested
  file:
    path: '/etc/hosts.allow.d/{{ item.weight | default("50") }}_{{ item.filename | default(item.daemon + "_allow") }}'
    state: 'absent'
  with_flattened:
    - tcpwrappers_allow
    - tcpwrappers_group_allow
    - tcpwrappers_host_allow
    - tcpwrappers_dependent_allow
    - tcpwrappers_local_allow
  when: ((item.daemon is defined and item.daemon) and
         ((item.client is undefined or (item.client is defined and not item.client)) and
          (item.accept_any is undefined or not item.accept_any) and
          (item.default is undefined or (item.default is defined and not item.default))) or
         (item.custom is defined and not item.custom))

- name: Generate hosts.allow entries
  template:
    src: 'etc/hosts.allow.d/allow.j2'
    dest: '/etc/hosts.allow.d/{{ item.weight | default("50") }}_{{ item.filename | default(item.daemon + "_allow") }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_flattened:
    - tcpwrappers_allow
    - tcpwrappers_group_allow
    - tcpwrappers_host_allow
    - tcpwrappers_dependent_allow
    - tcpwrappers_local_allow
  when: (item.daemon is defined and item.daemon and
         ((item.client is defined and item.client) or (item.default is defined and item.default) or
          (item.accept_any is defined and item.accept_any)) or
         (item.custom is defined and item.custom))

- name: Assemble hosts.allow.d
  assemble:
    src: '/etc/hosts.allow.d'
    dest: '/etc/hosts.allow'
    backup: False
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: tcpwrappers is defined and tcpwrappers

- name: Move current /etc/hosts.allow out of the way before reversion
  command: rm -f /etc/hosts.allow removes={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is undefined or (tcpwrappers is defined and tcpwrappers == False)

- name: Remove diversion of /etc/hosts.allow
  command: dpkg-divert --quiet --local --rename --remove /etc/hosts.allow
           removes={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is undefined or (tcpwrappers is defined and tcpwrappers == False)

- name: Make sure that Ansible local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save tcpwrappers local facts
  template:
    src: 'etc/ansible/facts.d/tcpwrappers.fact.j2'
    dest: '/etc/ansible/facts.d/tcpwrappers.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'

# ---- Manage /etc/hosts.deny ----

- name: Deny access from everywhere if enabled
  lineinfile:
    dest: '/etc/hosts.deny'
    regexp: '^ALL: ALL'
    line: 'ALL: ALL'
    state: 'present'
  when: (tcpwrappers is defined and tcpwrappers) and
        (tcpwrappers_deny_all is defined and tcpwrappers_deny_all)

- name: Allow access from everywhere if disabled
  lineinfile:
    dest: '/etc/hosts.deny'
    regexp: '^ALL: ALL'
    state: 'absent'
  when: (tcpwrappers is defined and tcpwrappers) and
        (tcpwrappers_deny_all is undefined or (tcpwrappers_deny_all is defined and tcpwrappers_deny_all == False))

