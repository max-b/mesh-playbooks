---

- name: Populate and update the package index files
  raw: apt-get update
  when: bootstrap_raw is defined and bootstrap_raw

- name: Install minimal Python support for Ansible
  raw: apt-get --no-install-recommends -yq install python python-apt libcap2-bin
  when: bootstrap_raw is defined and bootstrap_raw

- name: Install custom Ansible local facts
  copy:
    src: 'etc/ansible/facts.d/'
    dest: '/etc/ansible/facts.d/'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Gather host facts
  action: setup

- name: Make sure essential software is installed
  apt:
    name: '{{ item }}'
    state: 'present'
    update_cache: True
    cache_valid_time: '3600'
    install_recommends: False
  with_flattened:
    - bootstrap_base_packages
    - bootstrap_packages

- name: Create specified system groups
  group:
    name: '{{ item }}'
    state: 'present'
    system: True
  with_items: bootstrap_admin_groups
  when: bootstrap_admin is defined and bootstrap_admin | bool

- name: Check if potential administrator account exists
  shell: getent passwd {{ bootstrap_admin_name }} || true
  register: bootstrap_register_admin_account
  changed_when: False

- name: Create administrator group (system)
  group:
    name: '{{ bootstrap_admin_name }}'
    state: 'present'
    system: True
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and bootstrap_admin_system | bool))

- name: Create administrator group (normal)
  group:
    name: '{{ bootstrap_admin_name }}'
    state: 'present'
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and not bootstrap_admin_system | bool))

- name: Create administrator account (system)
  user:
    name: '{{ bootstrap_admin_name }}'
    state: 'present'
    system: True
    group: '{{ bootstrap_admin_name }}'
    groups: '{{ bootstrap_admin_groups | join(",") }}'
    append: True
    home: '{{ bootstrap_admin_system_home }}'
    shell: '{{ bootstrap_admin_shell }}'
    comment: '{{ bootstrap_admin_comment }}'
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and bootstrap_admin_system | bool))

- name: Create administrator account (normal)
  user:
    name: '{{ bootstrap_admin_name }}'
    state: 'present'
    group: '{{ bootstrap_admin_name }}'
    groups: '{{ bootstrap_admin_groups | join(",") }}'
    append: True
    home: '{{ bootstrap_admin_home }}'
    shell: '{{ bootstrap_admin_shell }}'
    comment: '{{ bootstrap_admin_comment }}'
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and not bootstrap_admin_system | bool))

- name: Set admin home directory group and permissions (system)
  file:
    path: '{{ bootstrap_admin_system_home }}'
    group: '{{ bootstrap_admin_home_group }}'
    mode: '{{ bootstrap_admin_home_mode }}'
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and bootstrap_admin_system | bool))

- name: Set admin home directory group and permissions (normal)
  file:
    path: '{{ bootstrap_admin_home }}'
    group: '{{ bootstrap_admin_home_group }}'
    mode: '{{ bootstrap_admin_home_mode }}'
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_register_admin_account is defined and not bootstrap_register_admin_account.stdout) and
         (bootstrap_admin_system is defined and not bootstrap_admin_system | bool))

- name: Install ssh public key on root account
  authorized_key:
    user: 'root'
    key: '{{ "\n".join(bootstrap_admin_sshkeys) | string }}'
    state: 'present'
  failed_when: (bootstrap_admin_sshkeys is undefined or
                (bootstrap_admin_sshkeys is defined and not bootstrap_admin_sshkeys))

- name: Install ssh public key on administrator account
  authorized_key:
    user: '{{ bootstrap_admin_name }}'
    key: '{{ "\n".join(bootstrap_admin_sshkeys) | string }}'
    state: 'present'
  when: bootstrap_admin is defined and bootstrap_admin | bool
  failed_when: (bootstrap_admin_sshkeys is undefined or
                (bootstrap_admin_sshkeys is defined and not bootstrap_admin_sshkeys))

- name: Configure system group with paswordless access in sudo
  lineinfile:
    dest: '/etc/sudoers.d/{{ bootstrap_sudo_group }}'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    state: 'present'
    create: True
    owner: 'root'
    group: 'root'
    mode: '0440'
    validate: 'visudo -cf %s'
  with_items:
    - regexp: '^Defaults: %{{ bootstrap_sudo_group }} env_check\s'
      line:    'Defaults: %{{ bootstrap_sudo_group }} env_check += "SSH_CLIENT"'
    - regexp: '^%{{ bootstrap_sudo_group }}\s'
      line:    '%{{ bootstrap_sudo_group }} ALL = (ALL:ALL) NOPASSWD: SETENV: ALL'
  when: bootstrap_sudo is defined and bootstrap_sudo | bool

- name: Ensure /etc/sudoers includes /etc/sudoers.d
  lineinfile:
    dest: '/etc/sudoers'
    regexp: '^#includedir\s+/etc/sudoers.d$'
    line: '#includedir /etc/sudoers.d'
    state: 'present'
    validate: 'visudo -cf %s'

- name: Make sure that administrator accout is in passwordless sudo group
  user:
    name: '{{ bootstrap_admin_name }}'
    state: 'present'
    groups: '{{ bootstrap_sudo_group }}'
    append: True
  when: ((bootstrap_admin is defined and bootstrap_admin | bool) and
         (bootstrap_sudo is defined and bootstrap_sudo | bool))

- name: Enforce new hostname
  hostname:
    name: '{{ bootstrap_hostname }}'
  when: (ansible_local|d() and ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled or
         (ansible_local.cap12s.enabled and 'cap_sys_admin' in ansible_local.cap12s.list)))

- name: Save enforced hostname
  copy:
    content: '{{ bootstrap_hostname + "\n" }}'
    dest: '/etc/hostname'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: (ansible_local|d() and ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled or
         (ansible_local.cap12s.enabled and 'cap_sys_admin' in ansible_local.cap12s.list)))

- name: Ensure domain is defined
  lineinfile:
    state: 'present'
    dest: '/etc/hosts'
    regexp: '{{ "^" + (bootstrap_ipv4 | default("127.0.1.1")) | replace(".","\.") }}'
    line: '{{ (bootstrap_ipv4 | default("127.0.1.1")) + "\t" + (bootstrap_hostname | default(ansible_hostname)) + "." + bootstrap_domain + "\t" + (bootstrap_hostname | default(ansible_hostname)) }}'
  when: bootstrap_domain is defined and bootstrap_domain

