---

- name: Load default interface configuration
  include_vars: "{{ item }}"
  with_first_found:
    - '../vars/{{ ifupdown_default_config }}.yml'
    - '../vars/networkmanager_{{ ifupdown_networkmanager|d() }}.yml'
    - '../vars/virtualization_{{ ansible_virtualization_type|d() }}_{{ ansible_virtualization_role|d() }}.yml'
    - '../vars/default_{{ ifupdown_static_config|d() }}.yml'
    - '../vars/default.yml'
  when: (ifupdown_interface is undefined or not ifupdown_interfaces)

- name: Prepare interface configuration if not defined
  set_fact:
    ifupdown_interfaces: '{{ ifupdown_default_interfaces }}'
  when: ((ifupdown_interfaces is undefined or not ifupdown_interfaces) and
         (ifupdown_dependent_interfaces is undefined and
         (ifupdown_default_interfaces is defined and ifupdown_default_interfaces)))

- name: Prepare interface configuration via dependency if defined
  set_fact:
    ifupdown_interfaces: '{{ ifupdown_dependent_interfaces }}'
  when: ifupdown_dependent_interfaces is defined and ifupdown_dependent_interfaces

- name: Gather required network interface capabilities
  set_fact:
    ifupdown_capabilities: '{{ ifupdown_interfaces | map(attribute="type") | list }}'

- name: Add package dependencies for full interface declaration functionality
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - ifupdown_packages
    - [ 'bsdutils', 'rsync' ]
    - [ '{{ "bridge-utils" if "bridge" in ifupdown_capabilities else [] }}' ]
    - [ '{{ "vlan" if "vlan" in ifupdown_capabilities else [] }}' ]
    - [ '{{ "ifenslave" if ("bond" in ifupdown_capabilities and ansible_distribution_release != "wheezy") else [] }}' ]
    - [ '{{ "ifenslave-2.6" if ("bond" in ifupdown_capabilities and ansible_distribution_release == "wheezy") else [] }}' ]

- name: Install network reconfiguration script
  template:
    src: 'usr/local/lib/ifupdown-reconfigure-interfaces.j2'
    dest: '{{ ifupdown_reconfigure_script }}'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Delete interface configuration if requested
  file:
    path: '{{ "/etc/network/interfaces.config.d/" + item.weight | default("00") + "_" + item.filename | default(item.alias | default(item.type | default("interface")) + "_" + item.iface) + (("_" + item.label) if (item.label is defined and item.label) else "") + ("_ipv4" if (item.inet is defined and item.inet) else "") + ("_ipv6" if (item.inet6 is defined and item.inet6) else "") }}'
    state: 'absent'
  with_items: ifupdown_interfaces
  register: ifupdown_register_interfaces_removator
  when: ((item.iface is defined and item.iface) and
         (item.delete is defined and item.delete))

- name: Generate interface configuration
  template:
    src: 'etc/network/interfaces.d/{{ item.type | default("interface") }}.j2'
    dest: '{{ "/etc/network/interfaces.config.d/" + item.weight | default("00") + "_" + item.filename | default(item.alias | default(item.type | default("interface")) + "_" + item.iface) + (("_" + item.label) if (item.label is defined and item.label) else "") + ("_ipv4" if (item.inet is defined and item.inet) else "") + ("_ipv6" if (item.inet6 is defined and item.inet6) else "") }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: ifupdown_interfaces
  register: ifupdown_register_interfaces_generator
  when: ((item.iface is defined and item.iface) and
         (item.delete is undefined or not item.delete))

- name: Create random temporary directory for ifupdown data
  command: mktemp -d
  register: ifupdown_register_tempdir
  when: (((ifupdown_register_interfaces_removator is defined and ifupdown_register_interfaces_removator.changed) or
          (ifupdown_register_interfaces_generator is defined and ifupdown_register_interfaces_generator.changed)) and
         (ifupdown_reconfigure is defined and ifupdown_reconfigure))

- name: Generate list of changed interfaces in temporary file
  template:
    src: 'tmp/ifupdown-changed-interfaces.j2'
    dest: '{{ ifupdown_register_tempdir.stdout + "/ifupdown-changed-interfaces" }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: (((ifupdown_register_interfaces_removator is defined and ifupdown_register_interfaces_removator.changed) or
          (ifupdown_register_interfaces_generator is defined and ifupdown_register_interfaces_generator.changed)) and
         (ifupdown_reconfigure is defined and ifupdown_reconfigure))

- name: Generate config script in a known location
  template:
    src: 'tmp/ifupdown-apply-config.j2'
    dest: '/tmp/ifupdown-apply-config'
    owner: 'root'
    group: 'root'
    mode: '0700'
  notify: [ 'Apply ifupdown configuration' ]
  when: (((ifupdown_register_interfaces_removator is defined and ifupdown_register_interfaces_removator.changed) or
          (ifupdown_register_interfaces_generator is defined and ifupdown_register_interfaces_generator.changed)) and
         ((ifupdown_reconfigure is defined and ifupdown_reconfigure) and (ifupdown_apply_config is defined and not ifupdown_apply_config | bool)))

- name: Reconfigure network interfaces
  command: '{{ ifupdown_reconfigure_script + " " + ifupdown_register_tempdir.stdout + "/ifupdown-changed-interfaces" }}'
  when: (((ifupdown_register_interfaces_removator is defined and ifupdown_register_interfaces_removator.changed) or
          (ifupdown_register_interfaces_generator is defined and ifupdown_register_interfaces_generator.changed)) and
         ((ifupdown_reconfigure is defined and ifupdown_reconfigure) and (ifupdown_apply_config is defined and ifupdown_apply_config | bool)))

